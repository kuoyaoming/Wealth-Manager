name: Android CI

on:
  push:
    tags:
      - 'v*.*.*'
    branches:
      - '**'
  pull_request:

permissions:
  contents: read
  packages: write
  security-events: write
  actions: read

jobs:
  # CodeQL security analysis
  codeql:
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: ['java']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  debug:
    if: startsWith(github.ref, 'refs/heads/')
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up JDK 17
        uses: actions/setup-java@v5
        with:
          distribution: temurin
          java-version: '17'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          cache-read-only: false
          gradle-home-cache-cleanup: false
        continue-on-error: true

      - name: Clear Gradle caches
        run: |
          echo "Clearing Gradle caches to avoid cache service issues..."
          ./gradlew clean --no-daemon || true
          rm -rf ~/.gradle/caches/ || true
          rm -rf .gradle/ || true

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v2

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install Android SDK components
        run: |
          yes | sdkmanager --licenses
          sdkmanager --install "platform-tools" "platforms;android-35" "build-tools;35.0.0"

      - name: Grant Gradle permissions
        run: chmod +x gradlew

      - name: Compute version (beta)
        shell: bash
        run: |
          echo "正在計算版本號..."
          TAG="$(git describe --tags --abbrev=0 2>/dev/null || echo v0.0.0)"
          BASE_NAME="${TAG#v}"
          SHORT_SHA="$(git rev-parse --short HEAD)"
          VERSION_NAME="${BASE_NAME}-beta.${GITHUB_RUN_NUMBER}+${SHORT_SHA}"
          echo "版本名稱: $VERSION_NAME"
          echo "版本代碼: ${GITHUB_RUN_NUMBER}"
          echo "WM_VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV
          echo "WM_VERSION_CODE=${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV

      - name: Run code quality checks
        run: |
          echo "Running code quality checks..."
          ./gradlew -PwmVersionName=${{ env.WM_VERSION_NAME }} -PwmVersionCode=${{ env.WM_VERSION_CODE }} :app:codeQualityCheck --no-daemon --stacktrace || {
            echo "Code quality checks failed, but continuing with build..."
            echo "This is expected as quality checks are temporarily disabled by user request"
          }
        continue-on-error: true

      - name: Run unit tests
        run: ./gradlew -PwmVersionName=${{ env.WM_VERSION_NAME }} -PwmVersionCode=${{ env.WM_VERSION_CODE }} :app:testDebugUnitTest --no-daemon --stacktrace
        continue-on-error: false

      - name: Build app and wear (Debug) and Save Log
        id: debug_build_log
        run: |
          LOG_FILE="build_debug_log.txt"
          BUILD_COMMAND="./gradlew -PwmVersionName=${{ env.WM_VERSION_NAME }} -PwmVersionCode=${{ env.WM_VERSION_CODE }} :app:assembleDebug :wear:assembleDebug --stacktrace --no-daemon"
          
          echo "--- 開始建置並將輸出保存到 $LOG_FILE ---"
          echo "建置指令: $BUILD_COMMAND"
          
          # 清理之前的建置檔案
          echo "正在清理之前的建置產物..."
          ./gradlew clean --no-daemon || true
          
          # 重試機制：最多重試3次
          MAX_RETRIES=3
          RETRY_COUNT=0
          EXIT_CODE=1
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ] && [ $EXIT_CODE -ne 0 ]; do
            RETRY_COUNT=$((RETRY_COUNT + 1))
            echo "建置嘗試 $RETRY_COUNT/$MAX_RETRIES"
            
            # 執行建構指令，將所有輸出導向日誌檔案
            echo "開始建置流程..."
            $BUILD_COMMAND > $LOG_FILE 2>&1
            EXIT_CODE=$?
            
            if [ $EXIT_CODE -eq 0 ]; then
              echo "✅ 建置成功！"
              break
            else
              echo "❌ 建置失敗，退出代碼: $EXIT_CODE"
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                echo "等待5秒後重試..."
                sleep 5
                # 清理快取後重試
                echo "清理快取後重試..."
                rm -rf ~/.gradle/caches/ || true
                rm -rf .gradle/ || true
                ./gradlew clean --no-daemon || true
              fi
            fi
          done
          
          # 將日誌內容打印到標準輸出，以便在 CI 介面中立即看到
          echo "--- 建置日誌輸出 ---"
          cat $LOG_FILE
          echo "--- 建置日誌結束 ---"
          
          echo "建置完成，退出代碼: $EXIT_CODE"
          
          # 檢查建置產物是否存在
          if [ -f "app/build/outputs/apk/debug/app-debug.apk" ]; then
            echo "✅ 找到 App APK: app/build/outputs/apk/debug/app-debug.apk"
          else
            echo "⚠️ 警告: 未找到 App APK"
          fi
          
          if [ -f "wear/build/outputs/apk/debug/wear-debug.apk" ]; then
            echo "✅ 找到 Wear APK: wear/build/outputs/apk/debug/wear-debug.apk"
          else
            echo "⚠️ 警告: 未找到 Wear APK"
          fi
          
          # 儲存日誌檔案路徑和退出代碼供後續步驟使用
          echo "BUILD_LOG_PATH=$LOG_FILE" >> $GITHUB_ENV
          echo "BUILD_EXIT_CODE=$EXIT_CODE" >> $GITHUB_ENV
          
          # 透過手動 exit 確保此步驟的成功/失敗狀態反映 Gradle 建構的結果
          exit $EXIT_CODE

      # -------------------------------------------------------------
      # 成功的 Artifacts 上傳 (僅在上一步驟成功時執行)
      # -------------------------------------------------------------

      - name: Upload app artifacts
        if: env.BUILD_EXIT_CODE == '0'
        uses: actions/upload-artifact@v4
        with:
          name: app-debug-apk
          path: app/build/outputs/apk/debug/
          if-no-files-found: warn

      - name: Upload wear artifacts
        if: env.BUILD_EXIT_CODE == '0'
        uses: actions/upload-artifact@v4
        with:
          name: wear-debug-apk
          path: wear/build/outputs/apk/debug/
          if-no-files-found: warn

      # -------------------------------------------------------------
      # 失敗日誌上傳 (僅在工作失敗時執行)
      # -------------------------------------------------------------
          
      - name: Upload Error Log (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-failure-log
          path: ${{ env.BUILD_LOG_PATH }} # 使用先前步驟設定的路徑

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v5
        with:
          distribution: temurin
          java-version: '17'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          cache-read-only: false
          gradle-home-cache-cleanup: false
        continue-on-error: true

      - name: Clear Gradle caches
        run: |
          echo "Clearing Gradle caches to avoid cache service issues..."
          ./gradlew clean --no-daemon || true
          rm -rf ~/.gradle/caches/ || true
          rm -rf .gradle/ || true

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v2

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install Android SDK components
        run: |
          yes | sdkmanager --licenses
          sdkmanager --install "platform-tools" "platforms;android-35" "build-tools;35.0.0"

      - name: Grant Gradle permissions
        run: chmod +x gradlew

      - name: Decode Android keystore
        if: env.ANDROID_KEYSTORE_BASE64 != ''
        run: |
          echo "$ANDROID_KEYSTORE_BASE64" | base64 -d > keystore.jks
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}

      - name: Compute version (release)
        shell: bash
        run: |
          echo "正在計算發布版本號..."
          TAG="$(git describe --tags --abbrev=0)"
          VERSION_NAME="${TAG#v}"
          echo "發布版本名稱: $VERSION_NAME"
          echo "版本代碼: ${GITHUB_RUN_NUMBER}"
          echo "WM_VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV
          echo "WM_VERSION_CODE=${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV

      - name: Run code quality checks (Release)
        run: |
          echo "Running code quality checks for release..."
          ./gradlew -PwmVersionName=${{ env.WM_VERSION_NAME }} -PwmVersionCode=${{ env.WM_VERSION_CODE }} :app:codeQualityCheck --no-daemon --stacktrace || {
            echo "Code quality checks failed, but continuing with release build..."
            echo "This is expected as quality checks are temporarily disabled by user request"
          }
        continue-on-error: true

      - name: Run unit tests (Release)
        run: ./gradlew -PwmVersionName=${{ env.WM_VERSION_NAME }} -PwmVersionCode=${{ env.WM_VERSION_CODE }} :app:testReleaseUnitTest --no-daemon --stacktrace
        continue-on-error: false

      - name: Build release bundles and APK
        env:
          ANDROID_KEYSTORE_PATH: ${{ github.workspace }}/keystore.jks
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        run: ./gradlew -PwmVersionName=${{ env.WM_VERSION_NAME }} -PwmVersionCode=${{ env.WM_VERSION_CODE }} :app:bundleRelease :app:assembleRelease --stacktrace

      - name: Upload release bundles
        uses: actions/upload-artifact@v4
        with:
          name: app-release-bundle
          path: |
            app/build/outputs/bundle/release/*.aab
            app/build/outputs/mapping/release/mapping.txt

      - name: Compute checksums
        run: |
          set -e
          cd app
          echo "正在生成 SHA256 校驗碼..."
          sha256sum build/outputs/bundle/release/*.aab > SHA256SUMS.txt
          sha256sum build/outputs/apk/release/*.apk >> SHA256SUMS.txt
          if [ -f build/outputs/mapping/release/mapping.txt ]; then
            sha256sum build/outputs/mapping/release/mapping.txt >> SHA256SUMS.txt
          fi
          echo "校驗碼生成完成:"
          cat SHA256SUMS.txt

      - name: Create GitHub Release and upload assets
        uses: softprops/action-gh-release@v2.1.0
        with:
          tag_name: ${{ github.ref_name }}
          name: v${{ env.WM_VERSION_NAME }}
          draft: false
          prerelease: false
          files: |
            app/build/outputs/bundle/release/*.aab
            app/build/outputs/apk/release/*.apk
            app/build/outputs/mapping/release/mapping.txt
            app/SHA256SUMS.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
