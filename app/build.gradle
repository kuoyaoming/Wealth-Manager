plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'com.google.devtools.ksp'
    id 'dagger.hilt.android.plugin'
    id 'kotlin-parcelize'
    // DISABLED BY USER REQUEST - JaCoCo coverage plugin temporarily disabled
    // id 'jacoco'
    // DISABLED BY USER REQUEST - Code quality checks temporarily disabled
    // id 'io.gitlab.arturbosch.detekt'
    // id 'org.jlleitschuh.gradle.ktlint'
    id 'org.jetbrains.kotlin.plugin.compose'
}

// Versioning: receive from CI or command line to avoid git calls during configuration
def wmVersionName = (project.findProperty('wmVersionName') ?: System.getenv('WM_VERSION_NAME') ?: '1.6.0') as String
def wmVersionCodeStr = (project.findProperty('wmVersionCode') ?: System.getenv('WM_VERSION_CODE') ?: '160').toString()
def wmVersionCode
try {
    wmVersionCode = Integer.parseInt(wmVersionCodeStr)
} catch (Exception ignored) {
    wmVersionCode = 1
}
def isCi = (System.getenv('CI') ?: 'false').toBoolean()

android {
    namespace = 'com.wealthmanager'
    compileSdk = 35

    signingConfigs {
        release {
            if (isCi) {
                // CI signing configuration
                storeFile file(System.getenv("ANDROID_KEYSTORE_PATH") ?: "debug.keystore")
                storePassword System.getenv("ANDROID_KEYSTORE_PASSWORD") ?: "android"
                keyAlias System.getenv("ANDROID_KEY_ALIAS") ?: "androiddebugkey"
                keyPassword System.getenv("ANDROID_KEY_PASSWORD") ?: "android"
            } else {
                // Local development - use debug keystore
                storeFile file("debug.keystore")
                storePassword "android"
                keyAlias "androiddebugkey"
                keyPassword "android"
            }
        }
    }

    defaultConfig {
        applicationId = "com.wealthmanager"
        minSdk = 34
        targetSdk = 35
        versionCode = wmVersionCode
        versionName = wmVersionName

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary = true
        }
        
        // Removed BuildConfig API keys. Keys must be provided by users in Settings.
    }

    buildTypes {
        release {
            // Enables code-related app optimization.
            minifyEnabled = true
            
            // Enables resource shrinking.
            shrinkResources = true
            
            // Default file with automatically generated optimization rules.
            proguardFiles = [getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro']
            ndk {
                debugSymbolLevel = 'FULL'
            }
            
            // Always use release signing config (it will fallback to debug keystore if CI vars not set)
            signingConfig signingConfigs.release
        }
        debug {
            minifyEnabled = false
            debuggable = true
            // Enable debug symbols for JNI libraries
            ndk {
                debugSymbolLevel = 'FULL'
            }
        }
    }
    
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
    
    kotlinOptions {
        jvmTarget = "17"
    }
    
    buildFeatures {
        compose = true
        viewBinding = true
        buildConfig = true
    }
    
    
    packagingOptions {
        resources {
            excludes += ['/META-INF/{AL2.0,LGPL2.1}']
        }
    }
    
    buildToolsVersion = '35.0.0'
    
    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
    }
}

// Guard: Only allow release AAB builds on CI (bundleRelease/publishRelease*)
afterEvaluate {
    if (!isCi) {
        tasks.matching { it.name == 'bundleRelease' || (it.name.toLowerCase().startsWith('publish') && it.name.toLowerCase().contains('release')) }.all { t ->
            t.doFirst {
                throw new GradleException('Release AAB builds are only allowed on CI.')
            }
        }
    }
}

dependencies {
    // Core Android
    implementation 'androidx.appcompat:appcompat:1.7.1'
    implementation 'androidx.core:core-ktx:1.13.1'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.7.0'
    implementation 'androidx.activity:activity-compose:1.8.2'
    implementation 'androidx.core:core-splashscreen:1.0.1'
    
    // Compose BOM
    implementation platform('androidx.compose:compose-bom:2024.12.01')
    implementation 'androidx.compose.ui:ui'
    implementation 'androidx.compose.ui:ui-graphics'
    implementation 'androidx.compose.ui:ui-tooling-preview'
    implementation 'androidx.compose.material3:material3'
    implementation 'androidx.compose.material3:material3-window-size-class'
    implementation 'androidx.compose.material:material-icons-extended'
    
    // Navigation
    implementation 'androidx.navigation:navigation-compose:2.7.6'
    
    // ViewModel
    implementation 'androidx.lifecycle:lifecycle-viewmodel-compose:2.7.0'
    
    // Room Database
    implementation 'androidx.room:room-runtime:2.8.1'
    implementation 'androidx.room:room-ktx:2.8.1'
    ksp 'androidx.room:room-compiler:2.8.1'
    
    // Hilt Dependency Injection
    implementation 'com.google.dagger:hilt-android:2.57.2'
    implementation 'androidx.hilt:hilt-navigation-compose:1.1.0'
    ksp 'com.google.dagger:hilt-compiler:2.57.2'
    
    // Biometric Authentication
    implementation 'androidx.biometric:biometric:1.1.0'
    
    // Networking
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.12.0'

    // Security Crypto for EncryptedSharedPreferences
    implementation 'androidx.security:security-crypto:1.1.0-alpha06'
    
    // Google Credential Manager for password manager integration
    implementation 'androidx.credentials:credentials:1.2.0'
    implementation 'androidx.credentials:credentials-play-services-auth:1.2.0'
    implementation 'com.google.android.gms:play-services-auth:20.7.0'

    // Wear OS data layer
    implementation 'com.google.android.gms:play-services-wearable:18.2.0'

    // Coroutines extensions
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-play-services:1.10.2'
    
    // Charts - Using Compose Canvas for now
    // implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'
    // implementation 'com.github.AnyChart:AnyChart-Android:1.1.2'
    
    // Coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.10.2'
    
    // Testing
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:5.8.0'
    androidTestImplementation 'androidx.test.ext:junit:1.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation platform('androidx.compose:compose-bom:2024.12.01')
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4'
    debugImplementation 'androidx.compose.ui:ui-tooling'
    debugImplementation 'androidx.compose.ui:ui-test-manifest:1.7.6'
}

// DISABLED BY USER REQUEST - JaCoCo configuration temporarily disabled
// User requested to disable coverage checks until further notice
// To re-enable: uncomment the following lines and remove this comment block
// jacoco {
//     toolVersion = "0.8.8"
// }

// DISABLED BY USER REQUEST - Test coverage configuration temporarily disabled
// User requested to disable coverage checks until further notice
// To re-enable: uncomment the following lines and remove this comment block
// tasks.withType(Test) {
//     jacoco.includeNoLocationClasses = true
//     jacoco.excludes = ['jdk.internal.*']
// }

// DISABLED BY USER REQUEST - Test coverage report generation temporarily disabled
// User requested to disable coverage checks until further notice
// To re-enable: uncomment the following lines and remove this comment block
// task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
//     reports {
//         xml.required = true
//         html.required = true
//         csv.required = false
//     }
//     def fileFilter = [
//         '**/R.class',
//         '**/R$*.class',
//         '**/BuildConfig.*',
//         '**/Manifest*.*',
//         '**/*Test*.*',
//         'android/**/*.*',
//         '**/di/**',
//         '**/hilt/**',
//         '**/Hilt*.*',
//         '**/*_Hilt*.*',
//         '**/Hilt_*.*',
//         '**/*_Factory.*',
//         '**/*_Impl.*',
//         '**/*_MembersInjector.*',
//         '**/*_GeneratedInjector.*',
//         '**/Dagger*.*',
//         '**/*_Generated*.*'
//     ]
//     def debugTree = fileTree(dir: "${buildDir}/intermediates/javac/debug/classes", excludes: fileFilter)
//     def mainSrc = "${project.projectDir}/src/main/java"
//     sourceDirectories.setFrom(files([mainSrc]))
//     classDirectories.setFrom(files([debugTree]))
//     executionData.setFrom(fileTree(dir: buildDir, includes: [
//         'jacoco/testDebugUnitTest.exec',
//         'outputs/code-coverage/connected/*coverage.ec'
//     ]))
// }

// DISABLED BY USER REQUEST - Test coverage verification temporarily disabled
// User requested to disable coverage checks until further notice
// To re-enable: uncomment the following lines and remove this comment block
// task jacocoTestCoverageVerification(type: JacocoCoverageVerification) {
//     dependsOn jacocoTestReport
//     violationRules {
//         rule {
//             limit {
//                 minimum = 0.80 // 80% minimum coverage
//             }
//         }
//     }
// }
// check.dependsOn jacocoTestCoverageVerification

// DISABLED BY USER REQUEST - Detekt configuration temporarily disabled
// detekt {
//     buildUponDefaultConfig = true
//     allRules = false
//     config.setFrom("$projectDir/../detekt.yml")
//     baseline = file("$projectDir/../detekt-baseline.xml")
// }

// DISABLED BY USER REQUEST - ktlint configuration temporarily disabled
// ktlint {
//     version = "1.0.1"
//     debug = true
//     verbose = true
//     android = true
//     outputToConsole = true
//     outputColorName = "RED"
//     ignoreFailures = true  // Temporarily ignore failures to allow CI/CD to pass
//     enableExperimentalRules = true
//     filter {
//         exclude("**/generated/**")
//         include("**/kotlin/**")
//     }
// }

// DISABLED BY USER REQUEST - Custom Gradle tasks for code quality temporarily disabled
// task codeQualityCheck {
//     group = 'verification'
//     description = 'Run all code quality checks (detekt + ktlint + tests)'
//     // DISABLED BY USER REQUEST - Coverage checks temporarily disabled
//     // User requested to disable coverage checks until further notice
//     // To re-enable: add 'jacocoTestReport' to dependsOn
//     dependsOn 'detekt', 'ktlintCheck', 'testDebugUnitTest'
// }

// task codeQualityFormat {
//     group = 'formatting'
//     description = 'Format code with ktlint and fix auto-fixable detekt issues'
//     dependsOn 'ktlintFormat'
//     finalizedBy 'detekt'
// }

// task codeQualityReport {
//     group = 'reporting'
//     description = 'Generate comprehensive code quality report'
//     // DISABLED BY USER REQUEST - Coverage report temporarily disabled
//     // User requested to disable coverage checks until further notice
//     // To re-enable: add 'jacocoTestReport' to dependsOn
//     dependsOn 'detekt', 'ktlintCheck'
//     doLast {
//         println "=== Code Quality Report ==="
//         println "Detekt: Check build/reports/detekt/detekt.html"
//         println "ktlint: Check build/reports/ktlint/ktlint.html"
//         // DISABLED BY USER REQUEST - Coverage report temporarily disabled
//         // println "Test Coverage: Check build/reports/jacoco/testDebugUnitTest/html/index.html"
//         println "=========================="
//     }
// }

// Make check task depend on code quality checks (temporarily disabled)
// check.dependsOn 'codeQualityCheck'