plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-parcelize'
    id 'com.google.devtools.ksp'
    id 'dagger.hilt.android.plugin'
    id 'org.jetbrains.kotlin.plugin.compose'
}

android {
    namespace = 'com.wealthmanager.wear'
    compileSdk = 35

    defaultConfig {
        applicationId "com.wealthmanager.wear"
        minSdk = 30
        targetSdk = 35
        versionCode 17
        versionName "1.6.0"

        vectorDrawables {
            useSupportLibrary = true
        }
        
        // Wear OS specific configuration
        manifestPlaceholders = [
            wearAppName: "Wealth Manager Wear"
        ]
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            ndk {
                debugSymbolLevel = 'FULL'
            }
        }
        debug {
            minifyEnabled false
            debuggable true
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = "17"
    }

    buildFeatures {
        compose = true
        viewBinding = false
        buildConfig = true
    }
    
    // Wear OS specific lint options
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }


    packagingOptions {
        resources {
            excludes += ['/META-INF/{AL2.0,LGPL2.1}']
        }
    }
}

dependencies {
    implementation 'androidx.core:core-ktx:1.17.0'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.9.4'

    // Compose for Wear OS
    implementation platform('androidx.compose:compose-bom:2025.09.01')
    implementation 'androidx.wear.compose:compose-material:1.5.2'
    implementation 'androidx.wear.compose:compose-foundation:1.5.2'
    implementation 'androidx.wear.compose:compose-navigation:1.5.2'
    implementation 'androidx.compose.ui:ui'
    implementation 'androidx.compose.ui:ui-tooling-preview'
    debugImplementation 'androidx.compose.ui:ui-tooling'

    // Tiles
    implementation 'androidx.wear.tiles:tiles:1.5.0'
    implementation 'androidx.wear.tiles:tiles-material:1.5.0'

    // Wearable services
    implementation 'com.google.android.gms:play-services-wearable:19.0.0'

    // Coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.10.2'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-play-services:1.10.2'

    // Hilt
    implementation 'com.google.dagger:hilt-android:2.57.2'
    ksp 'com.google.dagger:hilt-compiler:2.57.2'
    
    // Guava for Futures
    implementation 'com.google.guava:guava:31.0.1-android'

    // Testing
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.7.0'
}

// Custom task to check if target device is Wear OS
task checkWearDevice {
    doLast {
        def devices = []
        def process = "adb devices".execute()
        process.inputStream.eachLine { line ->
            if (line.contains("device") && !line.contains("List of devices")) {
                def deviceId = line.split()[0]
                def characteristics = "adb -s ${deviceId} shell getprop ro.build.characteristics".execute().text.trim()
                def product = "adb -s ${deviceId} shell getprop ro.build.product".execute().text.trim()
                
                if (characteristics.contains("watch") || product.contains("watch")) {
                    devices.add(deviceId)
                }
            }
        }
        
        if (devices.isEmpty()) {
            println "⚠️  警告: 沒有找到 Wear OS 裝置"
            println "Wear OS 應用程式只能安裝到 Wear OS 裝置上"
            println "請連接 Wear OS 手錶或使用 Wear OS 模擬器"
            throw new GradleException("沒有找到 Wear OS 裝置")
        } else {
            println "✅ 找到 Wear OS 裝置: ${devices.join(', ')}"
        }
    }
}

// Make installDebug depend on device check
tasks.whenTaskAdded { task ->
    if (task.name == 'installDebug') {
        task.dependsOn checkWearDevice
    }
}

